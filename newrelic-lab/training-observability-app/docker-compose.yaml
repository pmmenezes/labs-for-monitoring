services:
  # PostgreSQL Database
  postgres:
    container_name: postgres
    restart: always
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgresdb
      # Enable query logging for better observability
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgresdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "otel.resource.service.name=postgres"
      - "otel.resource.service.version=latest"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  # Redis Cache 
  redis-init:
    image: alpine:latest
    volumes:
      - redis_data:/data
    command: >
      sh -c "
        chown -R 999:999 /data &&
        chmod -R 755 /data &&
        echo 'Permissions set for Redis data directory'
      "
  # Redis Cache 
  redis:
    depends_on: 
      - redis-init
    container_name: redis
    restart: always
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --slowlog-log-slower-than 10000
      --slowlog-max-len 128
      --latency-monitor-threshold 100
      --maxmemory-policy allkeys-lru
      --loglevel notice
      --databases 16
      --dir /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "otel.resource.service.name=redis"
      - "otel.resource.service.version=7"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  # OpenTelemetry Collector
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /proc:/proc:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check
    environment:
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_OTLP_ENDPOINT=${NEW_RELIC_OTLP_ENDPOINT:-https://otlp.nr-data.net:4317}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
  # PostgreSQL Exporter for detailed metrics
  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgresdb?sslmode=disable"
      PG_EXPORTER_WEB_LISTEN_ADDRESS: ":9187"
      PG_EXPORTER_LOG_LEVEL: "info"
    volumes:
      - ./postgres-exporter.yml:/etc/postgres_exporter/postgres_exporter.yml:ro
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter for detailed metrics
  redis-exporter:
    container_name: redis-exporter
    image: oliver006/redis_exporter:latest
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_EXPORTER_LOG_FORMAT: "json"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
    name: monitoring-network
    attachable: true