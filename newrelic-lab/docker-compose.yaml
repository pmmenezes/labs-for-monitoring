services:
  # Aplicação Node.js principal
  app:
    build: ./app
    container_name: newrelic-app
    ports:
      - "3000:3000"
    environment:
#      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
#      - NEW_RELIC_APP_NAME=Lab-NodeJS-App
      - DATABASE_URL=postgresql://labuser:labpass@postgres:5432/labdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15
    container_name: newrelic-postgres
    environment:
      - POSTGRES_DB=labdb
      - POSTGRES_USER=labuser
      - POSTGRES_PASSWORD=labpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: newrelic-redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Nginx como reverse proxy
  nginx:
    build: ./nginx
    container_name: newrelic-nginx
    ports:
      - "80:80"
    depends_on:
      - app
    restart: unless-stopped

  # Gerador de carga para testes
  load-generator:
    image: alpine/curl
    container_name: newrelic-load-gen
    command: >
      sh -c "
        while true; do
          curl -s http://nginx/api/users > /dev/null;
          curl -s http://nginx/api/orders > /dev/null;
          curl -s http://nginx/api/products > /dev/null;
          curl -s http://nginx/health > /dev/null;
          sleep 2;
        done
      "
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  postgres_data: